Analyse scénario 3 :

1) DNS

- Combien de noms de domaines sont résolus et quand ?

Le seul domaine contacté dans cette trace est "rotterdam7058.discord.media" (pour obtenir son adresses IPv4 et IPv6). 

- Quels sont les serveurs autoritatifs pour ces noms de domaines ? Sont-ils gérés par des entreprises différentes ?

Il semblerait que le nom primaire du serveur est : Avec la commande "dig NS rotterdam2796.discord.com" nous trouvons : gabe.ns.cloudfare.com. et dns.cloudflare.com. .

- À quelles entreprises appartiennent les noms de domaines résolus ? Il y en a-t-il d’autres
que celle qui détient l’application ?

Il semblerait que les propriétaire soient cloudflare (obtenu via whois)

- Quels sont les types de requête DNS effectuées ?

Nous trouvons 2 standard query (pour l'adresse IPv6 et pour l'adresse IPv4) ainsi que leur réponse respective. Dans les réponses nous obtenons plusieurs réponses dans la même réponse. 

- Lorsqu’une requête DNS souhaite obtenir une adresse IP, quelle est sa famille ? Il y a-t-il une version IP préférée par l’application ?

Dans ce cas-ci nous demandons les 2 types d'adresse IP comme cité précédemment.

- Les requêtes contiennent elles des records additionnels ? Le cas échéant, à quoi servent-ils ?

Il n'y a pas de record additionnel 

- Observez-vous des comportements DNS inattendus ?

Non

2) Couche réseau

- Lorsque IPv4 est utilisé, l’application utilise-t-elle des techniques pour traverser les NAT?

Rien trouvé on dirait à vérifier

- Quels sont les adresses vers lesquels des paquets sont envoyés ? Retrouvez à quels noms de domaine elles correspondent, observez-vous une tendance particulière dans la famille d’adresse ? Pouvez-vous l’expliquer ?

"162.159.133.234","192.168.1.11"
"192.168.1.1","239.255.255.250"
"192.168.1.11","162.159.138.232"
"192.168.1.11","192.168.1.1"
"192.168.1.11","66.22.199.233"
"192.168.1.11","162.159.137.232"
"192.168.1.29","224.0.0.251"
"192.168.1.29","224.0.0.2"

192.168.1.11 : Adresse privée
192.168.1.1 : Adresse privée
192.168.1.29 : Adresse privée
162.159.133.234 : Cloudflare
239.255.255.250 Whois n'a aucune info
162.159.138.232 : Cloudflare
66.22.199.233 : RIPE qui a ensuite fait un renvoie qui suit discord-nlrtm1-1
162.159.137.232 : Cloudflare
224.0.0.251 : Whois n'a aucune info
224.0.0.2 : Whois n'a aucune info

3) Couche Transport

- Quels sont les protocoles de transports utilisés pour chaque fonctionnalité ?

TCP, UDP (+RTCP)

- Il y a-t-il plusieurs connexions vers un même nom de domaine ? Si oui, pouvez-vous l’expliquer ?

TODO

- Si vous observez du trafic QUIC, quels sont les versions utilisées ? Pouvez-vous identifier des extensions négociées dans le handshake ?

Pas de QUIC

- Lorsque vous observez du trafic UDP, identifiez-vous d’autres protocoles que QUIC et DNS ? Expliquez comment ils sont utilisés par l’application.

On retrouve ICMP, MDNS, RTCP et SSDP.
RTCP, acronyme de Real Time Transport Control Protocol, est un protocole utilisé en complément de RTP. Là où RTP transmet des données, RTCP, lui, fournit des méta-données statistiques sur la qualité du service (QoS).
L'Internet Control Message Protocol (ICMP) est un protocole de la couche réseau utilisé par les périphériques réseau pour diagnostiquer les problèmes de communication du réseau. L'ICMP est principalement utilisé pour déterminer si les données atteignent ou non leur destination en temps voulu. Le protocole ICMP est généralement utilisé sur les périphériques réseau, tels que les routeurs. ICMP est crucial pour le signalement des erreurs et les tests, mais il peut également être utilisé dans les attaques par déni de service distribué (DDoS) .
Simple Service Discovery Protocol (SSDP) est un protocole réseau basé sur la suite de protocoles Internet pour la diffusion et la découverte de services de réseau et d'informations de présence.

4 ) Chiffrement et sécurité

- L’utilisation du DNS est-elle sécurisée ? Comment ?

Nous voyons dans les packets DNS que le protocol UDP est présent mais il s'agit d'un protocol de transport. Parmis les logiciel de sécurité on retrouve au cours de la trace du TLS (qu'on retrouve même avant le DNS).

- Quelles versions de TLS sont utilisées ? Précisez les protocoles de transport sécurisés par ces versions.

On retrouve du TLSV1.2 dans ce scénario. On remarque que un handshake avec des adresses IPv6 au pkt : 80-82-84-86-88-89. Il crypte QUIC(TLSV1.3) et TCP(TLSV1.2).

- Quel est la durée de vie des certificats utilisés ? Par qui sont-ils certifiés ?

Pas trouver le temps dans le handshake dispo (#TODO)

- Lorsque vous pouvez observer l’établissement du chiffrement, quels sont les algorithmes de chiffrement utilisés ?

Voir pkt 80-82 bc y en a bcp

- Si vous observez du trafic UDP, semble-t-il chiffré ? Comment est-il sécurisé ?

Le traffic UDP ne semble pas chiffré, le checksum reste d'ailleurs toujours sur unverified. 

5) Application

- Quels comportements observez-vous lors d’une conversation comparée à un appel ? Quel impact à l’utilisation de la vidéo par rapport à un appel audio uniquement ?

La grosse différence au cours de mes traces est la présence du protocoles QUIC ou non, il semble que quand nous ayons un échange vocal sans caméra, le protocole quic est présent. bcp + de pkt via caméra et partage que sans rien (logique on dira). Les différents flux audio et video sont envoyés et reçus via UDP également. 

- Quel est le volume de données échangées par l’application pour chacune de ces fonctionnalités ? Utilisez une base appropriée permettant la comparaison (par ex. par minute).

pyshark

- Il y a-t-il des serveurs relais utilisés pour interagir avec un utilisateur ou les applications communiquent-elles directement ? Observez-vous autre chose lorsque les deux utilisateurs sont sur le même réseau Wi-Fi ?

Voir les différents serveurs contactés via DNS 

- Est-ce qu’interagir avec un utilisateur se trouvant dans le même réseau Wi-Fi ou Ethernet à un impact sur la façon dont le trafic applicatif est transporté ? Il y a-t-il des serveurs relais ?

Voir cette semaine avec Flo 
